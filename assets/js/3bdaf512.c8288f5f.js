"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[4805],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},82070:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},i="Supporting Infrastructure Deployment",s={unversionedId:"kits/product-edc/edc-tests/src/main/resources/deployment/helm/supporting-infrastructure/README",id:"kits/product-edc/edc-tests/src/main/resources/deployment/helm/supporting-infrastructure/README",title:"Supporting Infrastructure Deployment",description:"The Supporting Infrastructure Deployment creates a complete, independent and already configured EDC test environment.",source:"@site/docs/kits/product-edc/edc-tests/src/main/resources/deployment/helm/supporting-infrastructure/README.md",sourceDirName:"kits/product-edc/edc-tests/src/main/resources/deployment/helm/supporting-infrastructure",slug:"/kits/product-edc/edc-tests/src/main/resources/deployment/helm/supporting-infrastructure/",permalink:"/docs/kits/product-edc/edc-tests/src/main/resources/deployment/helm/supporting-infrastructure/",draft:!1,editUrl:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs/kits/product-edc/edc-tests/src/main/resources/deployment/helm/supporting-infrastructure/README.md",tags:[],version:"current",frontMatter:{},sidebar:"kits",previous:{title:"Omejdn DAPS",permalink:"/docs/kits/product-edc/edc-tests/src/main/resources/deployment/helm/omejdn/"},next:{title:"Samples",permalink:"/docs/kits/product-edc/docs/samples/"}},l={},p=[{value:"Components",id:"components",level:2},{value:"Omejdn DAPS",id:"omejdn-daps",level:3},{value:"HashiCorp Vault",id:"hashicorp-vault",level:3},{value:"Backend Application",id:"backend-application",level:3},{value:"PostgreSQL",id:"postgresql",level:3},{value:"Setup",id:"setup",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Start Demo Environment",id:"start-demo-environment",level:2},{value:"Update Helm Dependencies",id:"update-helm-dependencies",level:3},{value:"Install Demo Chart",id:"install-demo-chart",level:3},{value:"Stop Demo Environment",id:"stop-demo-environment",level:2},{value:"Uninstall Demo Chart",id:"uninstall-demo-chart",level:3}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"supporting-infrastructure-deployment"},"Supporting Infrastructure Deployment"),(0,a.kt)("p",null,"The Supporting Infrastructure Deployment creates a complete, independent and already configured EDC test environment.\nDuring the automated business tests, these infrastructure components are deployed together with two connectors (Plato & Sokrates)."),(0,a.kt)("p",null,"This deployment could also be used as"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"reference setup for teams, that want to create their own connector"),(0,a.kt)("li",{parentName:"ul"},"standalone infrastructure to try things out")),(0,a.kt)("p",null,"This deployment should ",(0,a.kt)("strong",{parentName:"p"},"never")," be used"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"in ",(0,a.kt)("strong",{parentName:"li"},"any")," production or near production environments"),(0,a.kt)("li",{parentName:"ul"},"in ",(0,a.kt)("strong",{parentName:"li"},"any")," long living internet facing connector setups")),(0,a.kt)("h2",{id:"components"},"Components"),(0,a.kt)("p",null,"Overview of the installed components."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Deployed Components",src:n(87470).Z,width:"646",height:"483"})),(0,a.kt)("h3",{id:"omejdn-daps"},"Omejdn DAPS"),(0,a.kt)("p",null,"The Dynamic Attribute Provisioning Service (DAPS) is a component of the IDS Ecosystem.\nThe Fraunhofer Institute has created a DAPS reference implementation, the Omejdn\nDAPS (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Fraunhofer-AISEC/omejdn-server"},"link"),"). This deplyoment configures and deployes a instance of\nthis reference implementation."),(0,a.kt)("p",null,"Definition of DAPS from the IDS Reference architecture v3.0"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The Identity Provider acts as an agent for the International\nData Spaces Association. It is responsible for issuing technical identities to parties that have been approved to become\nParticipants in the International Data Spaces. The Identity\nProvider is instructed to issue identities based on approved\nroles (e.g., App Store or App Provider). Only if equipped with\nsuch an identity, an entity is allowed to participate in the International Data Spaces")),(0,a.kt)("p",null,"Also, please note, that the Omejdn DAPS is meant as research sandbox and should not be used in any\nproductive environment."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"IMPORTANT:")," Omejdn is meant to be a research sandbox in which we can (re)implement standard protocols and\npotentially extend and modify functionality under the hood to support research projects. Use at your own\nrisk! (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Fraunhofer-AISEC/omejdn-server"},"source"),")")),(0,a.kt)("h3",{id:"hashicorp-vault"},"HashiCorp Vault"),(0,a.kt)("p",null,"The Control- and Data Plane persist confidential in the vault and persist and communicate using only the secret\nnames. Hence, it is not possible to run a connector without an instance of a vault."),(0,a.kt)("h3",{id:"backend-application"},"Backend Application"),(0,a.kt)("p",null,"After a Data Transfer is successfully prepared the control plane will contact the a configurable endpoint with the\ninformation it needs to initiate the data transfer. This transfer flow, where something like a Backend Application is\nrequired, is unique to the HTTP Proxy data transfer flow."),(0,a.kt)("p",null,"The Backend Application has an API endpoint, that is configured in the control plane. After it gets called with the data\ntransfer information, it will do the actual data transfer and store the data on disk."),(0,a.kt)("h3",{id:"postgresql"},"PostgreSQL"),(0,a.kt)("p",null,"This database is used to persist the state of the Control Plane."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Follow these steps to get a fully functional EDC demo environment out of the box."),(0,a.kt)("h3",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,"Install on your machine:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Minikube",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Documentation ",(0,a.kt)("a",{parentName:"li",href:"https://minikube.sigs.k8s.io/docs/start/"},"https://minikube.sigs.k8s.io/docs/start/")))),(0,a.kt)("li",{parentName:"ul"},"Helm",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Documentation ",(0,a.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"https://helm.sh/docs/intro/install/"))))),(0,a.kt)("h2",{id:"start-demo-environment"},"Start Demo Environment"),(0,a.kt)("h3",{id:"update-helm-dependencies"},"Update Helm Dependencies"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm dependency update\n")),(0,a.kt)("h3",{id:"install-demo-chart"},"Install Demo Chart"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm install tx-infrastructure --namespace tx --create-namespace .\n")),(0,a.kt)("h2",{id:"stop-demo-environment"},"Stop Demo Environment"),(0,a.kt)("h3",{id:"uninstall-demo-chart"},"Uninstall Demo Chart"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm uninstall tx-infrastructure --namespace tx\n")))}u.isMDXComponent=!0},87470:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/deployed_components-1b5883698f52ef1522357275ae4df538.png"}}]);