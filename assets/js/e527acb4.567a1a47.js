"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[3029],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},i=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return r?n.createElement(h,o(o({ref:t},i),{},{components:r})):n.createElement(h,o({ref:t},i))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var p=2;p<s;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},66455:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const s={},o="Local TXDC Setup",c={unversionedId:"kits/product-edc/docs/samples/Local TXDC Setup",id:"kits/product-edc/docs/samples/Local TXDC Setup",title:"Local TXDC Setup",description:"This document describes how to set up two TXDConnector instances locally. The Supporting Infrastructure Deployment, used",source:"@site/docs/kits/product-edc/docs/samples/Local TXDC Setup.md",sourceDirName:"kits/product-edc/docs/samples",slug:"/kits/product-edc/docs/samples/Local TXDC Setup",permalink:"/docs/kits/product-edc/docs/samples/Local TXDC Setup",draft:!1,editUrl:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs/kits/product-edc/docs/samples/Local TXDC Setup.md",tags:[],version:"current",frontMatter:{},sidebar:"kits",previous:{title:"Samples",permalink:"/docs/kits/product-edc/docs/samples/"},next:{title:"Transfer Data",permalink:"/docs/kits/product-edc/docs/samples/Transfer Data"}},l={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Local Deployment",id:"local-deployment",level:2},{value:"Supporting Infrastructure",id:"supporting-infrastructure",level:3},{value:"Plato Connector",id:"plato-connector",level:3},{value:"Sokrates Connector",id:"sokrates-connector",level:3},{value:"Uninstall",id:"uninstall",level:2}],i={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"local-txdc-setup"},"Local TXDC Setup"),(0,a.kt)("p",null,"This document describes how to set up two TXDConnector instances locally. The Supporting Infrastructure Deployment, used\nby this example, must never be used productively. The deployment of the two TXDConnector instances, done by this example,\nis not suitable for productive deployment scenarios."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://helm.sh"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Helm-URL-lightgrey",alt:"Helm"}))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Kubernetes-URL-lightgrey",alt:"Kubernetes"}))),(0,a.kt)("h2",{id:"local-deployment"},"Local Deployment"),(0,a.kt)("p",null,"The Local TXDC Setup consists of three separate deployments. The Supporting Infrastructure, that is required to\nrun connectors, and two different TXDC Connector instances, that can communicate with each other."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/kits/product-edc/edc-tests/src/main/resources/deployment/helm/supporting-infrastructure/"},"TXDC Supporting Infrastructure")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/kits/product-edc/charts/tractusx-connector/"},"TXDC Connector")," Plato"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/kits/product-edc/charts/tractusx-connector/"},"TXDC Connector")," Sokrates")),(0,a.kt)("h3",{id:"supporting-infrastructure"},"Supporting Infrastructure"),(0,a.kt)("p",null,"Before the connectors can be setup, the Supporting Infrastructure must be in place. It comes with pre-configured everything\nto run two connectors independently."),(0,a.kt)("p",null,"For this local test scenario,\nthe ",(0,a.kt)("a",{parentName:"p",href:"/docs/kits/product-edc/edc-tests/src/main/resources/deployment/helm/supporting-infrastructure/"},"Supporting Infrastructure"),"\nof the TXDC Business Tests can be used."),(0,a.kt)("p",null,"Install the TXDC Supporting Infrastructure by running the following command from the project root directory. The Minio\nset can be skipped, as it's only used by AWS S3 Transfer Business Tests. Also, the PostgreSQL Database is not really\nmandatory to try out the EDC. So it can be disabled as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"helm dependency update edc-tests/src/main/resources/deployment/helm/supporting-infrastructure\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"helm install infrastructure edc-tests/src/main/resources/deployment/helm/supporting-infrastructure \\\n    --namespace cx \\\n    --create-namespace \\\n    --set install.minio=false \\\n    --set install.postgresql=false\n")),(0,a.kt)("h3",{id:"plato-connector"},"Plato Connector"),(0,a.kt)("p",null,"After the supporting infrastructure is deployed the Plato Connector can be added. The Supporting Infrastructure\nDeployment has a DAPS Client and Vault Secrets configured accordingly. So that the TXDConnector can use them directly."),(0,a.kt)("p",null,"Install Plato by running the following command from the project root directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"helm install plato charts/tractusx-connector \\\n    --namespace cx \\\n    --create-namespace \\\n    --set fullnameOverride=plato \\\n    --set controlplane.image.tag=0.2.0 \\\n    --set controlplane.service.type=NodePort \\\n    --set controlplane.endpoints.data.authKey=password \\\n    --set vault.hashicorp.enabled=true \\\n    --set vault.hashicorp.url=http://vault:8200 \\\n    --set vault.hashicorp.token=root \\\n    --set vault.secretNames.transferProxyTokenSignerPublicKey=plato/daps/my-plato-daps-crt \\\n    --set vault.secretNames.transferProxyTokenSignerPrivateKey=plato/daps/my-plato-daps-key \\\n    --set vault.secretNames.transferProxyTokenEncryptionAesKey=plato/data-encryption-aes-keys \\\n    --set vault.secretNames.dapsPrivateKey=plato/daps/my-plato-daps-key \\\n    --set vault.secretNames.dapsPublicKey=plato/daps/my-plato-daps-crt \\\n    --set daps.url=http://ids-daps:4567 \\\n    --set daps.clientId=99:83:A7:17:86:FF:98:93:CE:A0:DD:A1:F1:36:FA:F6:0F:75:0A:23:keyid:99:83:A7:17:86:FF:98:93:CE:A0:DD:A1:F1:36:FA:F6:0F:75:0A:23 \\\n    --set backendService.httpProxyTokenReceiverUrl=http://backend:8080\n")),(0,a.kt)("p",null,"The different settings are explained in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/kits/product-edc/charts/tractusx-connector/"},"TXDC Connector")," documentation.\nBasically this deployment overrides the full name, to avoid naming conflicts, and sets a NodePort, to access the\ncontainers from outside the local Kubernetes cluster. Then it configures a DAPS instance and the corresponding vault,\nwhere the DAPS secrets are persisted, so that the connector has its own identity."),(0,a.kt)("h3",{id:"sokrates-connector"},"Sokrates Connector"),(0,a.kt)("p",null,"After Plato is set up the same can be done for Sokrates. The main difference will be, that Sokrates uses another DAPS\nClient ID with different public-/private keys."),(0,a.kt)("p",null,"Install Sokrates by running the following command from the project root directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"helm install sokrates charts/tractusx-connector  \\\n    --namespace cx \\\n    --create-namespace \\\n    --set fullnameOverride=sokrates \\\n    --set controlplane.image.tag=0.2.0 \\\n    --set controlplane.service.type=NodePort \\\n    --set controlplane.endpoints.data.authKey=password \\\n    --set vault.hashicorp.enabled=true \\\n    --set vault.hashicorp.url=http://vault:8200 \\\n    --set vault.hashicorp.token=root \\\n    --set vault.secretNames.transferProxyTokenSignerPublicKey=sokrates/daps/my-sokrates-daps-crt \\\n    --set vault.secretNames.transferProxyTokenSignerPrivateKey=sokrates/daps/my-sokrates-daps-key \\\n    --set vault.secretNames.transferProxyTokenEncryptionAesKey=sokrates/data-encryption-aes-keys \\\n    --set vault.secretNames.dapsPrivateKey=sokrates/daps/my-sokrates-daps-key \\\n    --set vault.secretNames.dapsPublicKey=sokrates/daps/my-sokrates-daps-crt \\\n    --set daps.url=http://ids-daps:4567 \\\n    --set daps.clientId=E7:07:2D:74:56:66:31:F0:7B:10:EA:B6:03:06:4C:23:7F:ED:A6:65:keyid:E7:07:2D:74:56:66:31:F0:7B:10:EA:B6:03:06:4C:23:7F:ED:A6:65 \\\n    --set backendService.httpProxyTokenReceiverUrl=http://backend:8080\n")),(0,a.kt)("h2",{id:"uninstall"},"Uninstall"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"helm uninstall --namespace cx infrastructure\nhelm uninstall --namespace cx plato\nhelm uninstall --namespace cx sokrates\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To try out the local setup, have a look at the ",(0,a.kt)("a",{parentName:"p",href:"/docs/kits/product-edc/docs/samples/Transfer%20Data"},"Transfer Example Documentation"))))}u.isMDXComponent=!0}}]);